import{a as s,b as p,c as a,d as l}from"../chunk-3CTIIA3F.mjs";var C=async({config:r,options:n})=>{if(!r)throw new Error("The Cypress config object is required.");let{CLERK_FAPI:t,CLERK_TESTING_TOKEN:e}=await p(n);return r.env.CLERK_FAPI=t,r.env.CLERK_TESTING_TOKEN=e,r};var o=r=>{let n=r?.options?.frontendApiUrl||Cypress.env("CLERK_FAPI");if(!n)throw new Error(a);let t=`https://${n}/v1/**`;cy.intercept(t,e=>{let i=Cypress.env("CLERK_TESTING_TOKEN");i&&(e.query[s]=i),e.continue()})};var d=({Cypress:r,cy:n})=>{r.Commands.add("clerkSignIn",t=>{o(),n.log("Clerk: Signing in..."),n.window().should(e=>{expect(e).to.not.have.property("Clerk",void 0),expect(e.Clerk.loaded).to.eq(!0)}).then(async e=>{await l({windowObject:e,signInParams:t}),n.log("Clerk: Finished signing in.")})}),r.Commands.add("clerkSignOut",t=>{n.log("Clerk: Signing out..."),n.window().should(e=>{expect(e).to.not.have.property("Clerk",void 0),expect(e.Clerk.loaded).to.eq(!0)}).then(async e=>{await e.Clerk.signOut(t),n.log("Clerk: Finished signing out.")})}),r.Commands.add("clerkLoaded",()=>{n.window().should(t=>{expect(t).to.not.have.property("Clerk",void 0),expect(t.Clerk.loaded).to.eq(!0)})})};export{d as addClerkCommands,C as clerkSetup,o as setupClerkTestingToken};
//# sourceMappingURL=index.mjs.map