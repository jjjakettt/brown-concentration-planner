{"version":3,"sources":["../../src/playwright/index.ts","../../src/common/constants.ts","../../src/common/setup.ts","../../src/common/errors.ts","../../src/common/helpers-utils.ts","../../src/playwright/setup.ts","../../src/playwright/setupClerkTestingToken.ts","../../src/playwright/helpers.ts"],"sourcesContent":["export { clerkSetup } from './setup';\nexport { setupClerkTestingToken } from './setupClerkTestingToken';\nexport { clerk } from './helpers';\n","export const TESTING_TOKEN_PARAM = '__clerk_testing_token';\n","import { createClerkClient } from '@clerk/backend';\nimport { isProductionFromSecretKey, parsePublishableKey } from '@clerk/shared/keys';\nimport dotenv from 'dotenv';\n\nimport type { ClerkSetupOptions, ClerkSetupReturn } from './types';\n\nexport const fetchEnvVars = async (options?: ClerkSetupOptions): Promise<ClerkSetupReturn> => {\n  const log = (msg: string) => {\n    if (options?.debug) {\n      console.log(`Clerk: ${msg}`);\n    }\n  };\n\n  log('Setting up Clerk...');\n  dotenv.config({ path: ['.env.local', '.env'] });\n\n  const publishableKey =\n    options?.publishableKey ||\n    process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY ||\n    process.env.VITE_CLERK_PUBLISHABLE_KEY ||\n    process.env.CLERK_PUBLISHABLE_KEY ||\n    process.env.REACT_APP_CLERK_PUBLISHABLE_KEY ||\n    process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY;\n\n  const secretKey = process.env.CLERK_SECRET_KEY;\n  let testingToken = process.env.CLERK_TESTING_TOKEN;\n\n  if (!publishableKey) {\n    throw new Error('You need to set the CLERK_PUBLISHABLE_KEY environment variable.');\n  }\n\n  if (!secretKey && !testingToken) {\n    throw new Error('You need to set the CLERK_SECRET_KEY or the CLERK_TESTING_TOKEN environment variable.');\n  }\n\n  if (secretKey && !testingToken) {\n    if (isProductionFromSecretKey(secretKey)) {\n      throw new Error(\n        'You are using a secret key from a production instance, but Testing Tokens only work in development instances.',\n      );\n    }\n\n    log('Fetching testing token from Clerk Backend API...');\n\n    try {\n      const apiUrl = process.env.CLERK_API_URL;\n      const clerkClient = createClerkClient({ secretKey, apiUrl });\n      const tokenData = await clerkClient.testingTokens.createTestingToken();\n      testingToken = tokenData.token;\n    } catch (err) {\n      console.error('Failed to fetch testing token from Clerk API.');\n      throw err;\n    }\n  }\n\n  return {\n    CLERK_FAPI: options?.frontendApiUrl || parsePublishableKey(publishableKey)?.frontendApi,\n    CLERK_TESTING_TOKEN: testingToken,\n  };\n};\n","export const ERROR_MISSING_FRONTEND_API_URL =\n  'The Clerk Frontend API URL is required to bypass bot protection. ' +\n  'Make sure the clerkSetup function is called during your global setup before setupClerkTestingToken is called.';\n","import type { EmailCodeFactor, PhoneCodeFactor, SignInFirstFactor } from '@clerk/types';\n\nimport type { SignInHelperParams } from './types';\n\n// This function is serialized and executed in the browser context\nexport const signInHelper = async ({ signInParams, windowObject }: SignInHelperParams) => {\n  try {\n    const w = windowObject || window;\n    if (!w.Clerk.client) {\n      return;\n    }\n    const signIn = w.Clerk.client.signIn;\n    if (signInParams.strategy === 'password') {\n      const res = await signIn.create(signInParams);\n      await w.Clerk.setActive({\n        session: res.createdSessionId,\n      });\n    } else {\n      // Assert that the identifier is a test email or phone number\n      if (signInParams.strategy === 'phone_code' && !signInParams.identifier.includes('+155555501')) {\n        throw new Error(\n          `Phone number should be a test phone number.\\n\n       Example: +15555550100.\\n\n       Learn more here: https://clerk.com/docs/testing/test-emails-and-phones#phone-numbers`,\n        );\n      }\n      if (signInParams.strategy === 'email_code' && !signInParams.identifier.includes('+clerk_test')) {\n        throw new Error(\n          `Email should be a test email.\\n\n       Any email with the +clerk_test subaddress is a test email address.\\n\n       Learn more here: https://clerk.com/docs/testing/test-emails-and-phones#email-addresses`,\n        );\n      }\n\n      // Sign in with code (email_code or phone_code)\n      const { supportedFirstFactors } = await signIn.create({\n        identifier: signInParams.identifier,\n      });\n      const codeFactorFn =\n        signInParams.strategy === 'phone_code'\n          ? (factor: SignInFirstFactor): factor is PhoneCodeFactor => factor.strategy === 'phone_code'\n          : (factor: SignInFirstFactor): factor is EmailCodeFactor => factor.strategy === 'email_code';\n      const codeFactor = supportedFirstFactors?.find(codeFactorFn);\n      if (codeFactor) {\n        const prepareParams =\n          signInParams.strategy === 'phone_code'\n            ? { strategy: signInParams.strategy, phoneNumberId: (codeFactor as PhoneCodeFactor).phoneNumberId }\n            : { strategy: signInParams.strategy, emailAddressId: (codeFactor as EmailCodeFactor).emailAddressId };\n\n        await signIn.prepareFirstFactor(prepareParams);\n        const signInAttempt = await signIn.attemptFirstFactor({\n          strategy: signInParams.strategy,\n          code: '424242',\n        });\n\n        if (signInAttempt.status === 'complete') {\n          await w.Clerk.setActive({ session: signInAttempt.createdSessionId });\n        } else {\n          throw new Error(`Status is ${signInAttempt.status}`);\n        }\n      } else {\n        throw new Error(`${signInParams.strategy} is not enabled.`);\n      }\n    }\n  } catch (err: any) {\n    throw new Error(`Clerk: Failed to sign in: ${err?.message}`);\n  }\n};\n","import type { ClerkSetupOptions } from '../common';\nimport { fetchEnvVars } from '../common';\n\n/**\n * Sets up Clerk for testing by fetching the testing token from the Clerk Backend API.\n *\n * @param options.publishableKey - The publishable key for your Clerk dev instance.\n * @param options.frontendApiUrl - The frontend API URL for your Clerk dev instance, without the protocol. It overrides the Frontend API URL parsed from the publishable key.\n * @param options.debug - Enable debug logs.\n * @returns A promise that resolves when Clerk is set up.\n *\n * @throws An error if the publishable key or the secret key is not provided.\n * @throws An error if the secret key is from a production instance.\n * @throws An error if the testing token cannot be fetched from the Clerk Backend API.\n */\nexport const clerkSetup = async (options?: ClerkSetupOptions) => {\n  const { CLERK_FAPI, CLERK_TESTING_TOKEN } = await fetchEnvVars(options);\n  process.env.CLERK_FAPI = CLERK_FAPI;\n  process.env.CLERK_TESTING_TOKEN = CLERK_TESTING_TOKEN;\n};\n","import type { Page } from '@playwright/test';\n\nimport type { SetupClerkTestingTokenOptions } from '../common';\nimport { ERROR_MISSING_FRONTEND_API_URL, TESTING_TOKEN_PARAM } from '../common';\n\ntype SetupClerkTestingTokenParams = {\n  page: Page;\n  options?: SetupClerkTestingTokenOptions;\n};\n\n/**\n * Bypasses bot protection by appending the testing token in the Frontend API requests.\n *\n * @param params.page - The Playwright page object.\n * @param params.options.frontendApiUrl - The frontend API URL for your Clerk dev instance, without the protocol.\n * @returns A promise that resolves when the bot protection bypass is set up.\n * @throws An error if the Frontend API URL is not provided.\n * @example\n * import { setupClerkTestingToken } from '@clerk/testing/playwright';\n *\n * test('should bypass bot protection', async ({ page }) => {\n *    await setupClerkTestingToken({ page });\n *    await page.goto('https://your-app.com');\n *    // Continue with your test...\n *  });\n */\nexport const setupClerkTestingToken = async ({ page, options }: SetupClerkTestingTokenParams) => {\n  const fapiUrl = options?.frontendApiUrl || process.env.CLERK_FAPI;\n  if (!fapiUrl) {\n    throw new Error(ERROR_MISSING_FRONTEND_API_URL);\n  }\n  const apiUrl = `https://${fapiUrl}/v1/**/*`;\n\n  await page.route(apiUrl, (route, request) => {\n    const originalUrl = new URL(request.url());\n    const testingToken = process.env.CLERK_TESTING_TOKEN;\n\n    if (testingToken) {\n      originalUrl.searchParams.set(TESTING_TOKEN_PARAM, testingToken);\n    }\n\n    route.continue({\n      url: originalUrl.toString(),\n    });\n  });\n};\n","import type { Clerk, SignOutOptions } from '@clerk/types';\nimport type { Page } from '@playwright/test';\n\nimport type { ClerkSignInParams, SetupClerkTestingTokenOptions } from '../common';\nimport { signInHelper } from '../common';\nimport { setupClerkTestingToken } from './setupClerkTestingToken';\n\ndeclare global {\n  interface Window {\n    Clerk: Clerk;\n  }\n}\n\ntype PlaywrightClerkLoadedParams = {\n  page: Page;\n};\n\ntype ClerkHelperParams = {\n  /**\n   * Signs in a user using Clerk. This helper supports only password, phone_code and email_code first factor strategies.\n   * Multi-factor is not supported.\n   * This helper is using the `setupClerkTestingToken` internally.\n   * It is required to call `page.goto` before calling this helper, and navigate to a not protected page that loads Clerk.\n   *\n   * If the strategy is password, the helper will sign in the user using the provided password and identifier.\n   * If the strategy is phone_code, you are required to have a user with a test phone number as an identifier (e.g. +15555550100).\n   * If the strategy is email_code, you are required to have a user with a test email as an identifier (e.g. your_email+clerk_test@example.com).\n   *\n   * @param opts.signInParams.strategy - The sign in strategy. Supported strategies are 'password', 'phone_code' and 'email_code'.\n   * @param opts.signInParams.identifier - The user's identifier. Could be a username, a phone number or an email.\n   * @param opts.signInParams.password - The user's password. Required only if the strategy is 'password'.\n   * @param opts.page - The Playwright page object.\n   * @param opts.setupClerkTestingTokenOptions - The options for the `setupClerkTestingToken` function. Optional.\n   *\n   * @example\n   * import { clerk } from \"@clerk/testing/playwright\";\n   *\n   *  test(\"sign in\", async ({ page }) => {\n   *     await page.goto(\"/\");\n   *     await clerk.signIn({\n   *       page,\n   *       signInParams: { strategy: 'phone_code', identifier: '+15555550100' },\n   *     });\n   *     await page.goto(\"/protected\");\n   *   });\n   */\n  signIn: (opts: PlaywrightClerkSignInParams) => Promise<void>;\n  /**\n   * Signs out the current user using Clerk.\n   * It is required to call `page.goto` before calling this helper, and navigate to a page that loads Clerk.\n   * @param opts.signOutOptions - A SignOutOptions object.\n   * @param opts.page - The Playwright page object.\n   *\n   * @example\n   * import { clerk } from \"@clerk/testing/playwright\";\n   *\n   *  test(\"sign out\", async ({ page }) => {\n   *     await page.goto(\"/\");\n   *     await clerk.signIn({\n   *       page,\n   *       signInParams: { strategy: 'phone_code', identifier: '+15555550100' },\n   *     });\n   *     await page.goto(\"/protected\");\n   *     await clerk.signOut({ page });\n   *     await page.goto(\"/protected\");\n   *     // should redirect to sign in page\n   *   });\n   */\n  signOut: (opts: PlaywrightClerkSignOutParams) => Promise<void>;\n  /**\n   * Asserts that Clerk has been loaded.\n   * It is required to call `page.goto` before calling this helper, and navigate to a page that loads Clerk.\n   *\n   * @param opts.page - The Playwright page object.\n   */\n  loaded: (opts: PlaywrightClerkLoadedParams) => Promise<void>;\n};\n\nconst loaded = async ({ page }: PlaywrightClerkLoadedParams) => {\n  await page.waitForFunction(() => window.Clerk !== undefined);\n  await page.waitForFunction(() => window.Clerk.loaded);\n};\n\ntype PlaywrightClerkSignInParams = {\n  page: Page;\n  signInParams: ClerkSignInParams;\n  setupClerkTestingTokenOptions?: SetupClerkTestingTokenOptions;\n};\n\nconst signIn = async ({ page, signInParams, setupClerkTestingTokenOptions }: PlaywrightClerkSignInParams) => {\n  await setupClerkTestingToken({ page, options: setupClerkTestingTokenOptions });\n  await loaded({ page });\n\n  await page.evaluate(signInHelper, { signInParams });\n};\n\ntype PlaywrightClerkSignOutParams = {\n  page: Page;\n  signOutOptions?: SignOutOptions;\n};\n\nconst signOut = async ({ page, signOutOptions }: PlaywrightClerkSignOutParams) => {\n  await loaded({ page });\n\n  await page.evaluate(async options => {\n    await window.Clerk.signOut(options);\n  }, signOutOptions);\n};\n\nexport const clerk: ClerkHelperParams = {\n  signIn,\n  signOut,\n  loaded,\n};\n"],"mappings":"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","names":["playwright_exports","__export","clerk","clerkSetup","setupClerkTestingToken","__toCommonJS","TESTING_TOKEN_PARAM","import_backend","import_keys","import_dotenv","fetchEnvVars","options","log","msg","dotenv","publishableKey","secretKey","testingToken","apiUrl","err","ERROR_MISSING_FRONTEND_API_URL","signInHelper","signInParams","windowObject","w","signIn","res","supportedFirstFactors","codeFactorFn","factor","codeFactor","prepareParams","signInAttempt","err","clerkSetup","options","CLERK_FAPI","CLERK_TESTING_TOKEN","fetchEnvVars","setupClerkTestingToken","page","options","fapiUrl","ERROR_MISSING_FRONTEND_API_URL","apiUrl","route","request","originalUrl","testingToken","TESTING_TOKEN_PARAM","loaded","page","signIn","signInParams","setupClerkTestingTokenOptions","setupClerkTestingToken","signInHelper","signOut","signOutOptions","options","clerk"]}